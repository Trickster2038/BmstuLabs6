
hello.elf:     file format elf32-littlenios2
hello.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000002a0 memsz 0x000002a0 flags r-x
    LOAD off    0x000012c0 vaddr 0x000042c0 paddr 0x000042c8 align 2**12
         filesz 0x00000008 memsz 0x00000008 flags rw-
    LOAD off    0x000012d0 vaddr 0x000042d0 paddr 0x000042d0 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000002a0  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rwdata       00000008  000042c0  000042c8  000012c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  3 .bss          00000010  000042d0  000042d0  000012d0  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000023  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  000012f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a25  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000569  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001682  00000000  00000000  00002599  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000017c  00000000  00000000  00003c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004c7  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001db  00000000  00000000  0000425f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  0000443c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00004450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00005231  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  00005234  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00005240  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00005241  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  00005242  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  00005246  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000524a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000006  00000000  00000000  0000524e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000006  00000000  00000000  00005254  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000006  00000000  00000000  0000525a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  00005260  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000000e  00000000  00000000  00005264  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0002aa9b  00000000  00000000  00005272  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
000042c0 l    d  .rwdata	00000000 .rwdata
000042d0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000040f0 l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
0000417c g     F .text	0000002c alt_main
000042c8 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
000042dc g     O .bss	00000004 errno
000042d4 g     O .bss	00000004 alt_argv
0000c2c0 g       *ABS*	00000000 _gp
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000042e0 g       *ABS*	00000000 __bss_end
000042b0 g     F .text	00000004 alt_dcache_flush_all
000042c8 g       *ABS*	00000000 __ram_rwdata_end
000042c0 g       *ABS*	00000000 __ram_rodata_end
000042e0 g       *ABS*	00000000 end
0000421c g     F .text	00000094 altera_avalon_uart_write
00006004 g       *ABS*	00000000 __alt_stack_pointer
00004020 g     F .text	0000003c _start
000041f8 g     F .text	00000004 alt_sys_init
000042c0 g       *ABS*	00000000 __ram_rwdata_start
000042c0 g       *ABS*	00000000 __ram_rodata_start
000042e0 g       *ABS*	00000000 __alt_stack_base
000042d0 g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000094 main
000042d8 g     O .bss	00000004 alt_envp
000042c0 g     O .rwdata	00000004 uart_0
000042c4 g     O .rwdata	00000004 alt_errno
000042c0 g       *ABS*	00000000 __flash_rodata_start
000041fc g     F .text	00000020 alt_irq_init
000042d0 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
000042c8 g       *ABS*	00000000 _edata
000042e0 g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
000042b8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000400c g       .entry	00000000 exit
00006004 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
000041a8 g     F .text	00000050 alt_putchar
000042b4 g     F .text	00000004 alt_icache_flush_all
00004110 g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	ded80114 	ori	sp,sp,24580

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b0b014 	ori	gp,gp,49856
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	1090b414 	ori	r2,r2,17104

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d0b814 	ori	r3,r3,17120

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	00041100 	call	4110 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	000417c0 	call	417c <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include "altera_avalon_sysid_qsys.h"
#include "altera_avalon_sysid_qsys_regs.h"
#include "sys/alt_stdio.h"

int main()
{
    405c:	defffc04 	addi	sp,sp,-16
    4060:	dfc00315 	stw	ra,12(sp)
    4064:	dc800215 	stw	r18,8(sp)
    4068:	dc400115 	stw	r17,4(sp)
    406c:	dc000015 	stw	r16,0(sp)
	char ch, sim;
	int i, ch1, buffer;
	ch1 = IORD_ALTERA_AVALON_SYSID_QSYS_ID(SYSID_QSYS_0_BASE);
    4070:	00a41214 	movui	r2,36936
    4074:	14800037 	ldwio	r18,0(r2)
    4078:	0009883a 	mov	r4,zero
    407c:	9007883a 	mov	r3,r18
    4080:	2023883a 	mov	r17,r4
    4084:	1821883a 	mov	r16,r3
  /* Event loop never exits. */
  while (1){
	  buffer = ch1;
	  i = 0;
	  while(i < 8){
		  sim = buffer % 16;
    4088:	00a00034 	movhi	r2,32768
    408c:	108003c4 	addi	r2,r2,15
    4090:	8088703a 	and	r4,r16,r2
    4094:	2000040e 	bge	r4,zero,40a8 <main+0x4c>
    4098:	213fffc4 	addi	r4,r4,-1
    409c:	00bffc04 	movi	r2,-16
    40a0:	2088b03a 	or	r4,r4,r2
    40a4:	21000044 	addi	r4,r4,1
		  if(sim < 10){
    40a8:	20c03fcc 	andi	r3,r4,255
    40ac:	18c0201c 	xori	r3,r3,128
    40b0:	18ffe004 	addi	r3,r3,-128
    40b4:	00800244 	movi	r2,9
			  alt_putchar(sim + '0');
    40b8:	19000c04 	addi	r4,r3,48
  while (1){
	  buffer = ch1;
	  i = 0;
	  while(i < 8){
		  sim = buffer % 16;
		  if(sim < 10){
    40bc:	10c0010e 	bge	r2,r3,40c4 <main+0x68>
			  alt_putchar(sim + '0');
		  } else {
			  alt_putchar(sim + 'A');
    40c0:	19001044 	addi	r4,r3,65
    40c4:	00041a80 	call	41a8 <alt_putchar>
		  }
		  buffer = buffer/16;
    40c8:	8005883a 	mov	r2,r16
		  ++i;
    40cc:	89000044 	addi	r4,r17,1
    40d0:	0023883a 	mov	r17,zero
		  if(sim < 10){
			  alt_putchar(sim + '0');
		  } else {
			  alt_putchar(sim + 'A');
		  }
		  buffer = buffer/16;
    40d4:	8000010e 	bge	r16,zero,40dc <main+0x80>
    40d8:	808003c4 	addi	r2,r16,15
    40dc:	1007d13a 	srai	r3,r2,4

  /* Event loop never exits. */
  while (1){
	  buffer = ch1;
	  i = 0;
	  while(i < 8){
    40e0:	008001c4 	movi	r2,7
			  alt_putchar(sim + '0');
		  } else {
			  alt_putchar(sim + 'A');
		  }
		  buffer = buffer/16;
		  ++i;
    40e4:	9021883a 	mov	r16,r18

  /* Event loop never exits. */
  while (1){
	  buffer = ch1;
	  i = 0;
	  while(i < 8){
    40e8:	113fe716 	blt	r2,r4,4088 <main+0x2c>
    40ec:	003fe406 	br	4080 <main+0x24>

000040f0 <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    40f0:	2900051e 	bne	r5,r4,4108 <alt_load_section+0x18>
    40f4:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    40f8:	20800017 	ldw	r2,0(r4)
    40fc:	21000104 	addi	r4,r4,4
    4100:	28800015 	stw	r2,0(r5)
    4104:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4108:	29bffb1e 	bne	r5,r6,40f8 <alt_load_section+0x8>
    410c:	f800283a 	ret

00004110 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    4110:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4114:	01000034 	movhi	r4,0
    4118:	2110b204 	addi	r4,r4,17096
    411c:	01400034 	movhi	r5,0
    4120:	2950b004 	addi	r5,r5,17088
    4124:	01800034 	movhi	r6,0
    4128:	3190b204 	addi	r6,r6,17096
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    412c:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    4130:	00040f00 	call	40f0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    4134:	01000034 	movhi	r4,0
    4138:	21100804 	addi	r4,r4,16416
    413c:	01400034 	movhi	r5,0
    4140:	29500804 	addi	r5,r5,16416
    4144:	01800034 	movhi	r6,0
    4148:	31900804 	addi	r6,r6,16416
    414c:	00040f00 	call	40f0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    4150:	01000034 	movhi	r4,0
    4154:	2110b004 	addi	r4,r4,17088
    4158:	01400034 	movhi	r5,0
    415c:	2950b004 	addi	r5,r5,17088
    4160:	01800034 	movhi	r6,0
    4164:	3190b004 	addi	r6,r6,17088
    4168:	00040f00 	call	40f0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    416c:	00042b00 	call	42b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    4170:	dfc00017 	ldw	ra,0(sp)
    4174:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4178:	00042b41 	jmpi	42b4 <alt_icache_flush_all>

0000417c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    417c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4180:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4184:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4188:	00041fc0 	call	41fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    418c:	00041f80 	call	41f8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4190:	d1200417 	ldw	r4,-32752(gp)
    4194:	d1600517 	ldw	r5,-32748(gp)
    4198:	d1a00617 	ldw	r6,-32744(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    419c:	dfc00017 	ldw	ra,0(sp)
    41a0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    41a4:	000405c1 	jmpi	405c <main>

000041a8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    41a8:	defffd04 	addi	sp,sp,-12
    41ac:	dc000115 	stw	r16,4(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    41b0:	d80b883a 	mov	r5,sp
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    41b4:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    41b8:	01800044 	movi	r6,1
    41bc:	01000034 	movhi	r4,0
    41c0:	2110b004 	addi	r4,r4,17088
    41c4:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    41c8:	dfc00215 	stw	ra,8(sp)
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
    41cc:	dc000005 	stb	r16,0(sp)

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
    41d0:	000421c0 	call	421c <altera_avalon_uart_write>
    41d4:	1009883a 	mov	r4,r2
    41d8:	00bfffc4 	movi	r2,-1
    41dc:	2080011e 	bne	r4,r2,41e4 <alt_putchar+0x3c>
    41e0:	2021883a 	mov	r16,r4
    }
    return c;
#else
    return putchar(c);
#endif
}
    41e4:	8005883a 	mov	r2,r16
    41e8:	dfc00217 	ldw	ra,8(sp)
    41ec:	dc000117 	ldw	r16,4(sp)
    41f0:	dec00304 	addi	sp,sp,12
    41f4:	f800283a 	ret

000041f8 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
}
    41f8:	f800283a 	ret

000041fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    41fc:	deffff04 	addi	sp,sp,-4
    4200:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    4204:	00042b80 	call	42b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    4208:	00800044 	movi	r2,1
    420c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    4210:	dfc00017 	ldw	ra,0(sp)
    4214:	dec00104 	addi	sp,sp,4
    4218:	f800283a 	ret

0000421c <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    421c:	defffd04 	addi	sp,sp,-12
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4220:	39d0000c 	andi	r7,r7,16384
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    4224:	dc400115 	stw	r17,4(sp)
    4228:	dc000015 	stw	r16,0(sp)
    422c:	dfc00215 	stw	ra,8(sp)
    4230:	3023883a 	mov	r17,r6
    4234:	380ec03a 	cmpne	r7,r7,zero
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    4238:	3021883a 	mov	r16,r6
  count = len;

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    423c:	20c00017 	ldw	r3,0(r4)
    4240:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    4244:	1080100c 	andi	r2,r2,64
    4248:	10000426 	beq	r2,zero,425c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    424c:	28800007 	ldb	r2,0(r5)
    4250:	29400044 	addi	r5,r5,1
    4254:	18800135 	stwio	r2,4(r3)
      count--;
    4258:	843fffc4 	addi	r16,r16,-1
    }
  }
  while (block && count);
    425c:	3800021e 	bne	r7,zero,4268 <altera_avalon_uart_write+0x4c>
    4260:	80000d26 	beq	r16,zero,4298 <altera_avalon_uart_write+0x7c>
    4264:	003ff506 	br	423c <altera_avalon_uart_write+0x20>

  if (count)
    4268:	80000b26 	beq	r16,zero,4298 <altera_avalon_uart_write+0x7c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    426c:	00800034 	movhi	r2,0
    4270:	1090b104 	addi	r2,r2,17092
    4274:	10800017 	ldw	r2,0(r2)
    4278:	1000031e 	bne	r2,zero,4288 <altera_avalon_uart_write+0x6c>
    427c:	00c00034 	movhi	r3,0
    4280:	18d0b704 	addi	r3,r3,17116
    4284:	00000206 	br	4290 <altera_avalon_uart_write+0x74>
    4288:	103ee83a 	callr	r2
    428c:	1007883a 	mov	r3,r2
  {
    ALT_ERRNO = EWOULDBLOCK;
    4290:	008002c4 	movi	r2,11
    4294:	18800015 	stw	r2,0(r3)
  }

  return (len - count);
}
    4298:	8c05c83a 	sub	r2,r17,r16
    429c:	dfc00217 	ldw	ra,8(sp)
    42a0:	dc400117 	ldw	r17,4(sp)
    42a4:	dc000017 	ldw	r16,0(sp)
    42a8:	dec00304 	addi	sp,sp,12
    42ac:	f800283a 	ret

000042b0 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    42b0:	f800283a 	ret

000042b4 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    42b4:	f800283a 	ret

000042b8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    42b8:	000170fa 	wrctl	ienable,zero
}
    42bc:	f800283a 	ret
