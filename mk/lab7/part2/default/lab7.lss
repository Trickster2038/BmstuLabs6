
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000185  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000ff  00000000  00000000  000002e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001dd  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000005c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000e1  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000093  00000000  00000000  000006d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	18 c0       	rjmp	.+48     	; 0x34 <__vector_1>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	34 d0       	rcall	.+104    	; 0x98 <main>
  30:	45 c0       	rjmp	.+138    	; 0xbc <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <__vector_1>:
#include <avr/io.h>
#include <util/delay.h>

// Обработки внешнего прерывания INT0
ISR(INT0_vect)
{ char timer; // локальная переменная
  34:	1f 92       	push	r1
  36:	0f 92       	push	r0
  38:	0f b6       	in	r0, 0x3f	; 63
  3a:	0f 92       	push	r0
  3c:	11 24       	eor	r1, r1
  3e:	2f 93       	push	r18
  40:	4f 93       	push	r20
  42:	5f 93       	push	r21
  44:	8f 93       	push	r24
  46:	9f 93       	push	r25
  48:	ef 93       	push	r30
  4a:	ff 93       	push	r31
 timer = TCNT0;
  4c:	22 b7       	in	r18, 0x32	; 50
 if (timer != 0)
  4e:	22 23       	and	r18, r18
  50:	b9 f0       	breq	.+46     	; 0x80 <__SREG__+0x41>
 {TCNT0 = 0; // сброс таймера/счётчика
  52:	12 be       	out	0x32, r1	; 50
 PORTB |= (1<<PB6); //PORTB=0b11000001 (выключаем светодиод LED6)
  54:	c6 9a       	sbi	0x18, 6	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  56:	44 e6       	ldi	r20, 0x64	; 100
  58:	50 e0       	ldi	r21, 0x00	; 0
 do {
 PORTB &= ~(1<<PB7);//PORTB=0b01000001 (включаем светодиод LED7)
  5a:	c7 98       	cbi	0x18, 7	; 24
  5c:	88 e8       	ldi	r24, 0x88	; 136
  5e:	93 e1       	ldi	r25, 0x13	; 19
  60:	fa 01       	movw	r30, r20
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <__SREG__+0x23>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  68:	d9 f7       	brne	.-10     	; 0x60 <__SREG__+0x21>
 _delay_ms(500); // задержка 500 мс
 PORTB |= (1<<PB7); //PORTB=0b11000001 (выключаем светодиод LED7)
  6a:	c7 9a       	sbi	0x18, 7	; 24
  6c:	88 e8       	ldi	r24, 0x88	; 136
  6e:	93 e1       	ldi	r25, 0x13	; 19
  70:	fa 01       	movw	r30, r20
  72:	31 97       	sbiw	r30, 0x01	; 1
  74:	f1 f7       	brne	.-4      	; 0x72 <__SREG__+0x33>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  76:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  78:	d9 f7       	brne	.-10     	; 0x70 <__SREG__+0x31>
 _delay_ms(500);
 } while (--timer != 0);
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	71 f7       	brne	.-36     	; 0x5a <__SREG__+0x1b>
 PORTB &= ~(1<<PB6); //PORTB=0b10000001 (включаем светодиод LED6)
  7e:	c6 98       	cbi	0x18, 6	; 24
 }
}
  80:	ff 91       	pop	r31
  82:	ef 91       	pop	r30
  84:	9f 91       	pop	r25
  86:	8f 91       	pop	r24
  88:	5f 91       	pop	r21
  8a:	4f 91       	pop	r20
  8c:	2f 91       	pop	r18
  8e:	0f 90       	pop	r0
  90:	0f be       	out	0x3f, r0	; 63
  92:	0f 90       	pop	r0
  94:	1f 90       	pop	r1
  96:	18 95       	reti

00000098 <main>:

int main(void)
{
 // Инициализация портов
DDRB=0xC0; // PB7,PB6 для вывода на LED7,LED6 PB0- для ввода
  98:	80 ec       	ldi	r24, 0xC0	; 192
  9a:	87 bb       	out	0x17, r24	; 23
 PORTB=0b10000001; // выключаем LED7, PB0-подтягивающий резистор кнопки
  9c:	81 e8       	ldi	r24, 0x81	; 129
  9e:	88 bb       	out	0x18, r24	; 24
 DDRD=0; 
  a0:	11 ba       	out	0x11, r1	; 17
 PORTD=(1<<PD2); // PD2-подтягивающий резистор
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	82 bb       	out	0x12, r24	; 18
 // Инициализация таймера 0
 TCCR0=0x06; 
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	83 bf       	out	0x33, r24	; 51
 TCNT0=0x00; 
  aa:	12 be       	out	0x32, r1	; 50
 
 GICR=(1<<INT0); // инициализация прерывания INT0 в GIСR (или GIMSK)
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	8b bf       	out	0x3b, r24	; 59
 MCUCR=(1<<SE); // разрешение перехода в режим Idle
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	85 bf       	out	0x35, r24	; 53
 sei(); // глобальное разрешение прерываний
  b4:	78 94       	sei
 for (;;) {
 asm("sleep"); // переход в режим Idle
  b6:	88 95       	sleep
 asm("nop");
  b8:	00 00       	nop
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <main+0x1e>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
