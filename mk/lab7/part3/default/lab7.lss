
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000097  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000063  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000019b  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009b  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	08 d0       	rcall	.+16     	; 0x40 <main>
  30:	35 c0       	rjmp	.+106    	; 0x9c <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <latch_it>:
#define out PORTC
#define in PINC

// 'Защёлкивание' адреса в регистре
void latch_it(void)
{ cle;
  34:	91 98       	cbi	0x12, 1	; 18
 asm("nop");
  36:	00 00       	nop
 sle;
  38:	91 9a       	sbi	0x12, 1	; 18
 asm("nop");
  3a:	00 00       	nop
 cle;
  3c:	91 98       	cbi	0x12, 1	; 18
}
  3e:	08 95       	ret

00000040 <main>:

int main()
{ uchar temp;
  40:	ff 92       	push	r15
  42:	0f 93       	push	r16
  44:	1f 93       	push	r17
 SPL = 0x54;
  46:	84 e5       	ldi	r24, 0x54	; 84
  48:	8d bf       	out	0x3d, r24	; 61
 SPH = 0x04;
  4a:	84 e0       	ldi	r24, 0x04	; 4
  4c:	8e bf       	out	0x3e, r24	; 62
 // Инициализация порта PD
 DDRD = 0xff;
  4e:	8f ef       	ldi	r24, 0xFF	; 255
  50:	81 bb       	out	0x11, r24	; 17
 // Неактивные входы 8255A
 srd;
  52:	93 9a       	sbi	0x12, 3	; 18
 swr;
  54:	94 9a       	sbi	0x12, 4	; 18
 scs;
  56:	92 9a       	sbi	0x12, 2	; 18
 // Разрешение 8255A и сброс 
 ccs;
  58:	92 98       	cbi	0x12, 2	; 18
 srst;
  5a:	90 9a       	sbi	0x12, 0	; 18
 asm("nop"); asm("nop"); asm("nop");
  5c:	00 00       	nop
  5e:	00 00       	nop
  60:	00 00       	nop
 crst;
  62:	90 98       	cbi	0x12, 0	; 18
 //
 DDRC=0xff;
  64:	84 bb       	out	0x14, r24	; 20
 out = 0x03; //адрес регистра управления 8255А
  66:	83 e0       	ldi	r24, 0x03	; 3
  68:	85 bb       	out	0x15, r24	; 21
 latch_it();
  6a:	e4 df       	rcall	.-56     	; 0x34 <latch_it>
 out = 0x82;
  6c:	82 e8       	ldi	r24, 0x82	; 130
  6e:	85 bb       	out	0x15, r24	; 21
 cwr;
  70:	94 98       	cbi	0x12, 4	; 18
 asm("nop");
  72:	00 00       	nop
 swr;
  74:	94 9a       	sbi	0x12, 4	; 18
 
 while(1)
 { //
 DDRC=0xff;
  76:	0f ef       	ldi	r16, 0xFF	; 255
 out = 0x01; //адрес на вывод
  78:	ff 24       	eor	r15, r15
  7a:	f3 94       	inc	r15
 asm("nop");
 swr;
 
 while(1)
 { //
 DDRC=0xff;
  7c:	04 bb       	out	0x14, r16	; 20
 out = 0x01; //адрес на вывод
  7e:	f5 ba       	out	0x15, r15	; 21
 latch_it();
  80:	d9 df       	rcall	.-78     	; 0x34 <latch_it>
 DDRC = 0; //KEY на ввод
  82:	14 ba       	out	0x14, r1	; 20
 crd;
  84:	93 98       	cbi	0x12, 3	; 18
 asm("nop");
  86:	00 00       	nop
 temp = in; //данные KEY
  88:	13 b3       	in	r17, 0x13	; 19
 srd;
  8a:	93 9a       	sbi	0x12, 3	; 18
 //
 DDRC = 0xff;
  8c:	04 bb       	out	0x14, r16	; 20
 out = 0x00; //адрес на вывод
  8e:	15 ba       	out	0x15, r1	; 21
latch_it();
  90:	d1 df       	rcall	.-94     	; 0x34 <latch_it>
 out = temp; //данные на LED
  92:	15 bb       	out	0x15, r17	; 21
 cwr;
  94:	94 98       	cbi	0x12, 4	; 18
 asm("nop");
  96:	00 00       	nop
 swr;
  98:	94 9a       	sbi	0x12, 4	; 18
  9a:	f0 cf       	rjmp	.-32     	; 0x7c <main+0x3c>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
